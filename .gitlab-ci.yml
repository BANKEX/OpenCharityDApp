variables:
  IMAGE: bankexlabs/$CI_PROJECT_NAME

stages:
  - setup
  - build-node-stage
  - build-node-prod
  - tests
  - release-nginx-stage
  - release-nginx-prod
  - deploy-stage
  - deploy-prod

cache:
  paths:
    - node_modules/

setup:
  image: node:alpine
  stage: setup
  script:
    - apk add --update git
    - apk --no-cache add g++ gcc libgcc libstdc++ linux-headers make python
    - npm install --quiet node-gyp -g
    - npm install
    - npm rebuild bcrypt --build-from-source
    - npm rebuild node-sass

build-node-stage:
  image: node:alpine
  stage: build-node-stage
  script:
    - npm install -g truffle
    - npm run build:aot:dev
    - truffle compile
  artifacts:
    paths:
      - dist
      - build/contracts
    expire_in: 24h

build-node-prod:
  image: node:alpine
  stage: build-node-prod
  script:
    - npm install -g truffle
    - npm run build:aot:prod
    - truffle compile
  artifacts:
    paths:
      - dist
      - build/contracts
    expire_in: 24h
  only:
    - production
    
tests:
  image: alpine
  stage: tests
  script:
    - echo "Tests OK"

release-nginx-stage:
  image: docker:latest
  stage: release-nginx-stage
  before_script:
    - docker login -u $DOCKER_USER -p $DOCKER_TOKEN
  script:
    - docker build -f docker/Dockerfile -t ${IMAGE}:stage .
    - docker push ${IMAGE}:stage
  dependencies: 
    - build-node-stage

release-nginx-prod:
  image: docker:latest
  stage: release-nginx-prod
  before_script:
    - docker login -u $DOCKER_USER -p $DOCKER_TOKEN
  script:
    - docker build -f docker/Dockerfile -t ${IMAGE}:prod .
    - docker push ${IMAGE}:prod
  dependencies: 
    - build-node-prod
  only:
    - production
    
deploy_stage:
  stage: deploy-stage
  image: tmaier/docker-compose
  variables:
    DOCKER_HOST: "tcp://charity-staging-do.bankex.team:2376"
    DOCKER_TLS_VERIFY: "1"
    SERVERNAME: opencharity.staging.bankex.team
    EMAIL: "om@bankexfoundation.org"
    DOCKER_CERT_PATH: "/certs"
    IMAGE: bankexlabs/$CI_PROJECT_NAME:stage
  before_script:
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$DO_DOCKER_CA_STAGE" > $DOCKER_CERT_PATH/ca.pem
    - echo "$DO_DOCKER_CERT_STAGE" > $DOCKER_CERT_PATH/cert.pem
    - echo "$DO_DOCKER_KEY_STAGE" > $DOCKER_CERT_PATH/key.pem
    - docker login -u $DOCKER_USER -p $DOCKER_TOKEN
    - echo "IMAGE=$IMAGE" > .env ; echo "VIRTUAL_HOST=$SERVERNAME" >> .env ; echo "LETSENCRYPT_HOST=$SERVERNAME" >> .env; echo "LETSENCRYPT_EMAIL=$EMAIL" >> .env
  script:
    - docker-compose -f docker/docker-compose.yml down
    - docker rmi $IMAGE || echo "image not exist"
    - docker pull $IMAGE
    - sleep 15
    - docker-compose -f docker/docker-compose.yml up -d
    - docker cp oc_client:/opt/contracts/* /var/lib/docker/volumes/docker_contracts/_data/
  environment:
    name: staging
    url: https://opencharity.staging.bankex.team
  when: manual

deploy_prod:
  stage: deploy-prod
  image: tmaier/docker-compose
  variables:
    DOCKER_HOST: "tcp://charity-prod-do.bankex.team:2376"
    DOCKER_TLS_VERIFY: "1"
    SERVERNAME: opencharity.bankex.team
    EMAIL: "om@bankexfoundation.org"
    DOCKER_CERT_PATH: "/certs"
    IMAGE: bankexlabs/$CI_PROJECT_NAME:prod
  before_script:
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$DO_DOCKER_CA_PROD" > $DOCKER_CERT_PATH/ca.pem
    - echo "$DO_DOCKER_CERT_PROD" > $DOCKER_CERT_PATH/cert.pem
    - echo "$DO_DOCKER_KEY_PROD" > $DOCKER_CERT_PATH/key.pem
    - docker login -u $DOCKER_USER -p $DOCKER_TOKEN
    - echo "IMAGE=$IMAGE" > .env ; echo "VIRTUAL_HOST=$SERVERNAME" >> .env ; echo "LETSENCRYPT_HOST=$SERVERNAME" >> .env; echo "LETSENCRYPT_EMAIL=$EMAIL" >> .env
  script:
    - docker-compose -f docker/docker-compose.yml down
    - docker rmi $IMAGE || echo "image not exist"
    - docker pull $IMAGE
    - sleep 15
    - docker-compose -f docker/docker-compose.yml up -d
  environment:
    name: prod
    url: https://opencharity.bankex.team
  when: manual
  only:
    - production

